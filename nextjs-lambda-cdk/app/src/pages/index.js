"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const image_1 = require("next/image");
const google_1 = require("next/font/google");
const geistSans = google_1.Geist({
    variable: "--font-geist-sans",
    subsets: ["latin"],
});
const geistMono = google_1.Geist_Mono({
    variable: "--font-geist-mono",
    subsets: ["latin"],
});
function Home() {
    return (<div className={`${geistSans.className} ${geistMono.className} grid grid-rows-[20px_1fr_20px] items-center justify-items-center min-h-screen p-8 pb-20 gap-16 sm:p-20 font-[family-name:var(--font-geist-sans)]`}>
      <main className="flex flex-col gap-[32px] row-start-2 items-center sm:items-start">
        <image_1.default className="dark:invert" src="/aws.jpeg" alt="AWS Certification" width={180} height={38} priority/>
        <ol className="list-inside list-decimal text-sm/6 text-center sm:text-left font-[family-name:var(--font-geist-mono)]">
          <li className="mb-2 tracking-[-.01em]">
            Get started by editing{" "}
            <code className="bg-black/[.05] dark:bg-white/[.06] px-1 py-0.5 rounded font-[family-name:var(--font-geist-mono)] font-semibold">
              src/pages/index.tsx
            </code>
            .
          </li>
          <li className="tracking-[-.01em]">
            Save and see your changes instantly.
          </li>
        </ol>
        
      </main>
      
    </div>);
}
exports.default = Home;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyJpbmRleC50c3giXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBK0I7QUFDL0IsNkNBQXFEO0FBRXJELE1BQU0sU0FBUyxHQUFHLGNBQUssQ0FBQztJQUN0QixRQUFRLEVBQUUsbUJBQW1CO0lBQzdCLE9BQU8sRUFBRSxDQUFDLE9BQU8sQ0FBQztDQUNuQixDQUFDLENBQUM7QUFFSCxNQUFNLFNBQVMsR0FBRyxtQkFBVSxDQUFDO0lBQzNCLFFBQVEsRUFBRSxtQkFBbUI7SUFDN0IsT0FBTyxFQUFFLENBQUMsT0FBTyxDQUFDO0NBQ25CLENBQUMsQ0FBQztBQUVILFNBQXdCLElBQUk7SUFDMUIsT0FBTyxDQUNMLENBQUMsR0FBRyxDQUNGLFNBQVMsQ0FBQyxDQUFDLEdBQUcsU0FBUyxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxtSkFBbUosQ0FBQyxDQUU1TTtNQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxrRUFBa0UsQ0FDaEY7UUFBQSxDQUFDLGVBQUssQ0FDSixTQUFTLENBQUMsYUFBYSxDQUN2QixHQUFHLENBQUMsV0FBVyxDQUNmLEdBQUcsQ0FBQyxtQkFBbUIsQ0FDdkIsS0FBSyxDQUFDLENBQUMsR0FBRyxDQUFDLENBQ1gsTUFBTSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQ1gsUUFBUSxFQUVWO1FBQUEsQ0FBQyxFQUFFLENBQUMsU0FBUyxDQUFDLHVHQUF1RyxDQUNuSDtVQUFBLENBQUMsRUFBRSxDQUFDLFNBQVMsQ0FBQyx3QkFBd0IsQ0FDcEM7a0NBQXNCLENBQUMsR0FBRyxDQUMxQjtZQUFBLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxnSEFBZ0gsQ0FDOUg7O1lBQ0YsRUFBRSxJQUFJLENBQ047O1VBQ0YsRUFBRSxFQUFFLENBQ0o7VUFBQSxDQUFDLEVBQUUsQ0FBQyxTQUFTLENBQUMsbUJBQW1CLENBQy9COztVQUNGLEVBQUUsRUFBRSxDQUNOO1FBQUEsRUFBRSxFQUFFLENBRU47O01BQUEsRUFBRSxJQUFJLENBQ047TUErQ0Y7SUFBQSxFQUFFLEdBQUcsQ0FBQyxDQUNQLENBQUM7QUFDSixDQUFDO0FBN0VELHVCQTZFQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBJbWFnZSBmcm9tIFwibmV4dC9pbWFnZVwiO1xuaW1wb3J0IHsgR2Vpc3QsIEdlaXN0X01vbm8gfSBmcm9tIFwibmV4dC9mb250L2dvb2dsZVwiO1xuXG5jb25zdCBnZWlzdFNhbnMgPSBHZWlzdCh7XG4gIHZhcmlhYmxlOiBcIi0tZm9udC1nZWlzdC1zYW5zXCIsXG4gIHN1YnNldHM6IFtcImxhdGluXCJdLFxufSk7XG5cbmNvbnN0IGdlaXN0TW9ubyA9IEdlaXN0X01vbm8oe1xuICB2YXJpYWJsZTogXCItLWZvbnQtZ2Vpc3QtbW9ub1wiLFxuICBzdWJzZXRzOiBbXCJsYXRpblwiXSxcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBIb21lKCkge1xuICByZXR1cm4gKFxuICAgIDxkaXZcbiAgICAgIGNsYXNzTmFtZT17YCR7Z2Vpc3RTYW5zLmNsYXNzTmFtZX0gJHtnZWlzdE1vbm8uY2xhc3NOYW1lfSBncmlkIGdyaWQtcm93cy1bMjBweF8xZnJfMjBweF0gaXRlbXMtY2VudGVyIGp1c3RpZnktaXRlbXMtY2VudGVyIG1pbi1oLXNjcmVlbiBwLTggcGItMjAgZ2FwLTE2IHNtOnAtMjAgZm9udC1bZmFtaWx5LW5hbWU6dmFyKC0tZm9udC1nZWlzdC1zYW5zKV1gfVxuICAgID5cbiAgICAgIDxtYWluIGNsYXNzTmFtZT1cImZsZXggZmxleC1jb2wgZ2FwLVszMnB4XSByb3ctc3RhcnQtMiBpdGVtcy1jZW50ZXIgc206aXRlbXMtc3RhcnRcIj5cbiAgICAgICAgPEltYWdlXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZGFyazppbnZlcnRcIlxuICAgICAgICAgIHNyYz1cIi9hd3MuanBlZ1wiXG4gICAgICAgICAgYWx0PVwiQVdTIENlcnRpZmljYXRpb25cIlxuICAgICAgICAgIHdpZHRoPXsxODB9XG4gICAgICAgICAgaGVpZ2h0PXszOH1cbiAgICAgICAgICBwcmlvcml0eVxuICAgICAgICAvPlxuICAgICAgICA8b2wgY2xhc3NOYW1lPVwibGlzdC1pbnNpZGUgbGlzdC1kZWNpbWFsIHRleHQtc20vNiB0ZXh0LWNlbnRlciBzbTp0ZXh0LWxlZnQgZm9udC1bZmFtaWx5LW5hbWU6dmFyKC0tZm9udC1nZWlzdC1tb25vKV1cIj5cbiAgICAgICAgICA8bGkgY2xhc3NOYW1lPVwibWItMiB0cmFja2luZy1bLS4wMWVtXVwiPlxuICAgICAgICAgICAgR2V0IHN0YXJ0ZWQgYnkgZWRpdGluZ3tcIiBcIn1cbiAgICAgICAgICAgIDxjb2RlIGNsYXNzTmFtZT1cImJnLWJsYWNrL1suMDVdIGRhcms6Ymctd2hpdGUvWy4wNl0gcHgtMSBweS0wLjUgcm91bmRlZCBmb250LVtmYW1pbHktbmFtZTp2YXIoLS1mb250LWdlaXN0LW1vbm8pXSBmb250LXNlbWlib2xkXCI+XG4gICAgICAgICAgICAgIHNyYy9wYWdlcy9pbmRleC50c3hcbiAgICAgICAgICAgIDwvY29kZT5cbiAgICAgICAgICAgIC5cbiAgICAgICAgICA8L2xpPlxuICAgICAgICAgIDxsaSBjbGFzc05hbWU9XCJ0cmFja2luZy1bLS4wMWVtXVwiPlxuICAgICAgICAgICAgU2F2ZSBhbmQgc2VlIHlvdXIgY2hhbmdlcyBpbnN0YW50bHkuXG4gICAgICAgICAgPC9saT5cbiAgICAgICAgPC9vbD5cbiAgICAgICAgXG4gICAgICA8L21haW4+XG4gICAgICB7LyogPGZvb3RlciBjbGFzc05hbWU9XCJyb3ctc3RhcnQtMyBmbGV4IGdhcC1bMjRweF0gZmxleC13cmFwIGl0ZW1zLWNlbnRlciBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8YVxuICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIGhvdmVyOnVuZGVybGluZSBob3Zlcjp1bmRlcmxpbmUtb2Zmc2V0LTRcIlxuICAgICAgICAgIGhyZWY9XCJodHRwczovL25leHRqcy5vcmcvbGVhcm4/dXRtX3NvdXJjZT1jcmVhdGUtbmV4dC1hcHAmdXRtX21lZGl1bT1kZWZhdWx0LXRlbXBsYXRlLXR3JnV0bV9jYW1wYWlnbj1jcmVhdGUtbmV4dC1hcHBcIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgID5cbiAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgIGFyaWEtaGlkZGVuXG4gICAgICAgICAgICBzcmM9XCIvZmlsZS5zdmdcIlxuICAgICAgICAgICAgYWx0PVwiRmlsZSBpY29uXCJcbiAgICAgICAgICAgIHdpZHRoPXsxNn1cbiAgICAgICAgICAgIGhlaWdodD17MTZ9XG4gICAgICAgICAgLz5cbiAgICAgICAgICBMZWFyblxuICAgICAgICA8L2E+XG4gICAgICAgIDxhXG4gICAgICAgICAgY2xhc3NOYW1lPVwiZmxleCBpdGVtcy1jZW50ZXIgZ2FwLTIgaG92ZXI6dW5kZXJsaW5lIGhvdmVyOnVuZGVybGluZS1vZmZzZXQtNFwiXG4gICAgICAgICAgaHJlZj1cImh0dHBzOi8vdmVyY2VsLmNvbS90ZW1wbGF0ZXM/ZnJhbWV3b3JrPW5leHQuanMmdXRtX3NvdXJjZT1jcmVhdGUtbmV4dC1hcHAmdXRtX21lZGl1bT1kZWZhdWx0LXRlbXBsYXRlLXR3JnV0bV9jYW1wYWlnbj1jcmVhdGUtbmV4dC1hcHBcIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgID5cbiAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgIGFyaWEtaGlkZGVuXG4gICAgICAgICAgICBzcmM9XCIvd2luZG93LnN2Z1wiXG4gICAgICAgICAgICBhbHQ9XCJXaW5kb3cgaWNvblwiXG4gICAgICAgICAgICB3aWR0aD17MTZ9XG4gICAgICAgICAgICBoZWlnaHQ9ezE2fVxuICAgICAgICAgIC8+XG4gICAgICAgICAgRXhhbXBsZXNcbiAgICAgICAgPC9hPlxuICAgICAgICA8YVxuICAgICAgICAgIGNsYXNzTmFtZT1cImZsZXggaXRlbXMtY2VudGVyIGdhcC0yIGhvdmVyOnVuZGVybGluZSBob3Zlcjp1bmRlcmxpbmUtb2Zmc2V0LTRcIlxuICAgICAgICAgIGhyZWY9XCJodHRwczovL25leHRqcy5vcmc/dXRtX3NvdXJjZT1jcmVhdGUtbmV4dC1hcHAmdXRtX21lZGl1bT1kZWZhdWx0LXRlbXBsYXRlLXR3JnV0bV9jYW1wYWlnbj1jcmVhdGUtbmV4dC1hcHBcIlxuICAgICAgICAgIHRhcmdldD1cIl9ibGFua1wiXG4gICAgICAgICAgcmVsPVwibm9vcGVuZXIgbm9yZWZlcnJlclwiXG4gICAgICAgID5cbiAgICAgICAgICA8SW1hZ2VcbiAgICAgICAgICAgIGFyaWEtaGlkZGVuXG4gICAgICAgICAgICBzcmM9XCIvZ2xvYmUuc3ZnXCJcbiAgICAgICAgICAgIGFsdD1cIkdsb2JlIGljb25cIlxuICAgICAgICAgICAgd2lkdGg9ezE2fVxuICAgICAgICAgICAgaGVpZ2h0PXsxNn1cbiAgICAgICAgICAvPlxuICAgICAgICAgIEdvIHRvIG5leHRqcy5vcmcg4oaSXG4gICAgICAgIDwvYT5cbiAgICAgIDwvZm9vdGVyPiAqL31cbiAgICA8L2Rpdj5cbiAgKTtcbn1cbiJdfQ==